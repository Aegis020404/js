//  Типы событий указателя
// Схема именований событий указателя похожа на события мыши:

// Событие указателя	Аналогичное событие мыши
// pointerdown	mousedown
// pointerup	mouseup
// pointermove	mousemove
// pointerover	mouseover
// pointerout	mouseout
// pointerenter	mouseenter
// pointerleave	mouseleave
// pointercancel	-
// gotpointercapture	-
// lostpointercapture - 


// Свойства событий указателя
// События указателя содержат те же свойства, что и события мыши, например clientX/Y, target и т.п., и несколько дополнительных:

// pointerId – уникальный идентификатор указателя, вызвавшего событие.

// Идентификатор генерируется браузером. Это свойство позволяет обрабатывать несколько указателей, например сенсорный экран со стилусом и мульти-тач (увидим примеры ниже).

// pointerType – тип указывающего устройства. Должен быть строкой с одним из значений: «mouse», «pen» или «touch».

// Мы можем использовать это свойство, чтобы определять разное поведение для разных типов указателей.

// isPrimary – равно true для основного указателя (первый палец в мульти-тач).

// Мульти-тач
// Одной из функций, которую абсолютно не поддерживают события мыши, является мульти-тач: возможность касаться сразу нескольких мест на телефоне или планшете или выполнять специальные жесты.

// События указателя позволяют обрабатывать мульти-тач с помощью свойств pointerId и isPrimary.

// Вот что происходит, когда пользователь касается сенсорного экрана в одном месте, а затем в другом:

// При касании первым пальцем:
// происходит событие pointerdown со свойством isPrimary=true и некоторым pointerId.
// При касании вторым и последующими пальцами (при остающемся первом):
// происходит событие pointerdown со свойством isPrimary=false и уникальным pointerId для каждого касания.



// Событие: pointercancel
// Событие pointercancel происходит, когда текущее действие с указателем по какой-то причине прерывается, и события указателя больше не генерируются.

// К таким причинам можно отнести:

// Указывающее устройство было физически выключено.
// Изменилась ориентация устройства (перевернули планшет).
// Браузер решил сам обработать действие, считая его жестом мыши, масштабированием и т.п.


// Захват указателя
// Захват указателя – особая возможность событий указателя.

// Общая идея очень проста, но поначалу может показаться странной, так как для других событий ничего подобного просто нет.

// Основной метод:

// elem.setPointerCapture(pointerId) – привязывает события с данным pointerId к elem. После такого вызова все события указателя с таким pointerId будут иметь elem в качестве целевого элемента (как будто произошли над elem), вне зависимости от того, где в документе они произошли.
// Другими словами, elem.setPointerCapture(pointerId) меняет target всех дальнейших событий с данным pointerId на elem.

// Эта привязка отменяется:

// автоматически, при возникновении события pointerup или pointercancel,
// автоматически, если elem удаляется из документа,
// при вызове elem.releasePointerCapture(pointerId).