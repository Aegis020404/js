// Два способа мышления
    // Итеративный способ: цикл for:
        function pow(x, n) {
            let result = 1;

            // умножаем result на x n раз в цикле
            for (let i = 0; i < n;i++) {
                result *= x;
            }

            return result;
        };

        console.log( pow(2, 3) ); // 8
    
    // Рекурсивный способ упрощения задачи и вызов функцией самой себе
        pow = function(x, n) { 
            if (n == 1) { // базовая рекурсия
                return x;
            } else {
                return x * pow(x, n -1) 
            }
        }
        console.log( pow(2, 4) );


// Контекст выполнения, стек
        // Теперь мы посмотрим, как работают рекурсивные вызовы. Для этого заглянем «под капот» функций.

    // Информация о процессе выполнения запущенной функции хранится в её контексте выполнения (execution context).

    // Контекст выполнения – специальная внутренняя структура данных, которая содержит информацию о вызове функции. Она включает в себя конкретное место в коде, на котором находится интерпретатор, локальные переменные функции, значение this (мы не используем его в данном примере) и прочую служебную информацию.

    // Один вызов функции имеет ровно один контекст выполнения, связанный с ним.

    // Когда функция производит вложенный вызов, происходит следующее:

    // Выполнение текущей функции приостанавливается.
    // Контекст выполнения, связанный с ней, запоминается в специальной структуре данных – стеке контекстов выполнения.
    // Выполняются вложенные вызовы, для каждого из которых создаётся свой контекст выполнения.
    // После их завершения старый контекст достаётся из стека, и выполнение внешней функции возобновляется с того места, где она была остановлена.


// Рекурсивные  обходы

        let company = { 
            sales:[{name: "John", salary: 1000}, {name: 'Alice', salary: 600}],
            developerment: {
                sites: [{name: 'Peter', salary: 2000}, {name: 'Alex', salary: 1800 }],
                internals: [{name: 'Jack', salary: 1300}]
            }
        };

        // Функция для подсчёта суммы зарплат
        function sumSalaries(department) {
            // if( Array.isArray(department))
        };

       
       const first = [,1, 2, 3, 4,];
       const second = [,3, 4, 5, 6,];

       function intersection(a, b) {
           let inter = []
           for(let key of a) {
               if ( b.includes(key) && key !==undefined ) inter.push(key)
           }
           return inter
       }

       console.log(intersection(first, second));