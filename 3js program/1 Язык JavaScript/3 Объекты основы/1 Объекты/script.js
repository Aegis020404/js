let userConstructor = new Object();// синтаксис 'Конструктор объекта'
let userLiteral = {};// синтаксис 'Литерал объекта'


// Литералы и свойства
    let userLiteral1 = { // объект
        name: 'John',    // под ключом "name" хранится значение "John"
        age: 30,         // под ключом "age" хранится значение 30
        'like birds': true, // имя свойства из нескольких слов должно быть в кавычках
    }

    // Получаем свойства объекта
    console.log(userLiteral1.name);

    userLiteral1.idAdmin = true; // добавляем свойства

    delete userLiteral1.age; // удаляем свойства


    // Объект, объявленный как константа, может быть изменён
    // Объект, объявленный через const, может быть изменён.
    const userConst = {
        name:'John',
    };

    userConst.name = "Pete";

    console.log(userConst.name)// Pete
    // Определение const выдаст ошибку только если мы присвоим переменной другое значение: user=....


// Квадратные скобки
    userLiteral1['Likes birds'] = false;
    console.log(userLiteral1['Likes birds'])

    let key = "Likes birds";
    console.log(userLiteral1.key);// undefined
    console.log(userLiteral1[key]);// false

    // key = prompt("Что вы хотите узнать о пользователе?", "name");
    console.log(userLiteral1[key])// John (если ввели "name")


// Вычисляемые свойства
// Мы можем использовать квадратные скобки в литеральной нотации для создания вычисляемого свойства.
        // let fruit = prompt("Какой фрукт купить?", "apple");

        // let bag = {
        //     [fruit]:5,// имя свойства будет взято из переменной fruit
        // };
        // console.log(bag.apple)// 5, если fruit="apple"
    // Квадратные скобки дают намного больше возможностей, чем запись через точку. Они позволяют использовать любые имена свойств и переменные, хотя и требуют более громоздких конструкций кода.

    // Подведём итог: в большинстве случаев, когда имена свойств известны и просты, используется запись через точку. Если же нам нужно что-то более сложное, то мы используем квадратные скобки.


//  Свойство из переменной
    // В реальном коде часто нам необходимо использовать существующие переменные как значения для свойств с тем же именем.
    
    function makeUser(name,age) {
            // return{
            //     name:name,
            //     age:age,
            //     // другие свойства
            // };
        // Вместо name:name мы можем написать просто name:
        return {
            name, // то же самое, что и name: name
            age,  // то же самое, что и age: age
        }
    }

    let user2 = makeUser('John',30);
    console.log(user2.name) // John


// Ограничения на имена свойств
    // Эти имена свойства дуступны так как объект всё переводит в строки

    let obj = {
        for: 1,
        let: 2,
        return: 3,
        0: "text" // то же самое что и "0": "Тест"
    };

    console.log(obj.for + obj.let + obj.return)//6


// Проверка существования свойства, оператор «in»

let user3 = {};
console.log(user3.noSuchProperty === undefined);//true означает "свойства нет"

let user4 = {
    name: 'John',
    age: 30,
};
console.log('age' in user4)// true, user.age существует
console.log('blabla' in user4)// false, user.blabla не существует


// Цикл for...in

let codes = {
    "49": "Германия",
    "41": "Швейцария",
    "44": "Великобритания",
    // ..,
    "1": "США"
  };
  
  for (let code in codes) {
    console.log(code); // 1, 41, 44, 49
  }

//   Целочисленные свойства? Это что?
// Термин «целочисленное свойство» означает строку, которая может быть преобразована в целое число и обратно без изменений.

// То есть, "49" – это целочисленное имя свойства, потому что если его преобразовать в целое число, а затем обратно в строку, то оно не изменится. А вот свойства "+49" или "1.2" таковыми не являются:
// Math.trunc - встроенная функция, которая удаляет десятичную часть
console.log(String(Math.trunc(Number("49"))) ); // "49", то же самое ⇒ свойство целочисленное
console.log(String(Math.trunc(Number("+49"))) ); // "49", не то же самое, что "+49" ⇒ свойство не целочисленное
console.log(String(Math.trunc(Number("1.2"))) ); // "1", не то же самое, что "1.2" ⇒ свойство не целочисленное

let codes1 = {
    "+49": "Германия",
    "+41": "Швейцария",
    "+44": "Великобритания",
    // ..,
    "+1": "США"
  };
  
  for (let code in codes1) {
    console.log( +code ); // 49, 41, 44, 1
  }

