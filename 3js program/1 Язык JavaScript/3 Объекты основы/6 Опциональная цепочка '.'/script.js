// Опциональная цепочка ?. — это безопасный способ доступа к свойствам вложенных объектов, даже если какое-либо из промежуточных свойств не существует
    let user = {}; // пользователь без свойства address

    // console.log(user.address.street); // ошибка!
    console.log(user && user.address && user.address.street)//undefined не возовет ошибку
    console.log(user?.address?.street); // undefined не вызовет ошибку

    // Не злоупотребляйте опциональной цепочкой
    // Используйте ?. только тогда, когда допускаете ситуацию, что значение перед ним не существует.

    // Например, если по нашей логике объект user точно существует, но его свойство address является необязательным, то предпочтительнее использовать следующую конструкцию: user.address?.street.

    // Тогда если переменная user по ошибке окажется пустой, мы увидим программную ошибку и исправим это.

    // ReferenceError: user is not defined
        // user?.address;


// Сокращенное вычесление
    let user1 = null;
    let x = 0

    user1?.sayHi(x++); // нет user1, поэтому до x++ вычисления не дойдёт
    
    console.log(x)// 0, значение не было увеличено на единицу


// Другие варианты применения: ?.(), ?.[]
    // Опциональная цепочка ?. — это не оператор, а специальная синтаксическая конструкция, которая также работает с функциями и квадратными скобками.

    let user2 = {
        admin() {
            console.log('I am admin')
        }
    }

    let user3 = {};
    user2.admin?.();// Я администратор
    user3.admin?.();// ничего не выведет, но и не выведет ошибку    


    delete user2?.admin;
    delete user3?.admin;
    


// user?.name = "John"; // Ошибка, это не сработает
// это по сути то же самое что undefined = "John"


