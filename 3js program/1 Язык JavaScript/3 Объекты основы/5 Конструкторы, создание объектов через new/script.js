// Функция-конструктор
// Функции-конструкторы являются обычными функциями. Но есть два соглашения:

// Имя функции-конструктора должно начинаться с большой буквы.
// Функция-конструктор должна вызываться при помощи оператора "new".
    function User(name) {
            // this = {};  (неявно)  
            // добавляет свойства к this
        this.name = name;
        this.isAdmin = false;
         // return this;  (неявно)
    }

    let user = new User('Вася');

    console.log(user.name); // Вася
    console.log(user.isAdmin); // false


// Проверка на вызов в режиме конструктора: new.target
    // Используя специальное свойство new.target внутри функции, мы можем проверить, вызвана ли функция при помощи оператора new или без него.

    // В случае, если функция вызвана при помощи new, то в new.target будет сама функция, в противном случае undefined.

    function Check() {
        console.log(new.target) 
    }
    Check() //undefined so unless "new"
    new Check() // function Check() {}

// Возврат значения из конструктора return
    // Обычно конструкторы ничего не возвращают явно. Их задача – записать все необходимое в this, который в итоге станет результатом.

    // Но если return всё же есть, то применяется простое правило:

    // При вызове return с объектом, будет возвращён объект, а не this.
    // При вызове return с примитивным значением, примитивное значение будет отброшено.
    // Другими словами, return с объектом возвращает объект, в любом другом случае конструктор вернёт this.
    function BigUser() {
        this.name = "Вася";

        return { name: "Godzilla" };//<-- возвращает этот объект
    }

    console.log( new BigUser().name); // Godzilla, получили объект

    function SmallUser() {

        this.name = "Вася";

        return 23;// <-- возвращает this
    };

    console.log(new SmallUser().name); // Вася


    //     Отсутствие скобок
    // Кстати, мы можем не ставить скобки после new, если вызов конструктора идёт без аргументов.

    let user2 = new User; // <-- без скобок
    // // то же, что и
    let user3 = new User();
    // Пропуск скобок считается плохой практикой, но синтаксис языка такое позволяет.


// Создание методов в конструкторе

    function User4(name) {
        this.name = name;

        this.sayHi = function() {
            console.log('My name is ' + this.name);
        };
    }

    let vasya = new User4('Vasya');

    vasya.sayHi()

// Для создания сложных объектов есть и более «продвинутый» синтаксис – классы, которые мы разберём позже.