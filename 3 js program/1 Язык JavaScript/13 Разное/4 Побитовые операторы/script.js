console.log(parseInt("11000", 2))  //– переводит строку с двоичной записью числа в число.
console.log(parseInt("11000", 2).toString(2)) //– получает для числа n запись в 2-ной системе в виде строки.


// & (Побитовое И)
    // Выполняет операцию И над каждой парой бит.
    // Результат a & b равен единице только когда оба бита a и b равны единице.
console.group()
    console.log(1 & 1);
    console.log(1 & 0);
    console.log(0 & 1);
    console.log(0 & 0);
console.groupEnd()

// | (Побитовое ИЛИ)
 //Выполняет операцию ИЛИ над каждой парой бит. Результат a | b равен 1, если хотя бы один бит из a,b равен 1.
console.group()
    console.log(1 | 1);
    console.log(1 | 0);
    console.log(0 | 1);
    console.log(0 | 0);
console.groupEnd()

// ^ (Исключающее ИЛИ)
    // Выполняет операцию «Исключающее ИЛИ» над каждой парой бит.
    // a Исключающее ИЛИ b равно 1, если только a=1 или только b=1, но не оба одновременно a=b=1.
console.group()
    console.log(1 ^ 1);
    console.log(1 ^ 0);
    console.log(0 ^ 1);
    console.log(0 ^ 0);
console.groupEnd()
    // Исключающее ИЛИ в шифровании
    console.log(14 ^ 9); // 7
    console.log(7 ^ 9); // 14
    console.log(7 ^ 14); // 9


// ~ (Побитовое НЕ)
    // Производит операцию НЕ над каждым битом, заменяя его на обратный ему.
    console.log(~1) // -0 = -( n + 1 )


// << (Битовый сдвиг влево)
    // Операторы битового сдвига принимают два операнда. Первый – это число для сдвига, а второй – количество битов, которые нужно сдвинуть в первом операнде.
    // Оператор << сдвигает первый операнд на указанное число битов влево. Лишние биты отбрасываются, справа добавляются нулевые биты.
    console.log(9 << 2); // 36
    console.log(1 << 8) // 256


// >> (Правый битовый сдвиг, переносящий знак)
    // Этот оператор сдвигает биты вправо, отбрасывая лишние. При этом слева добавляется копия крайнего-левого бита.
    // Знак числа (представленный крайним-левым битом) при этом не меняется, так как новый крайний-левый бит имеет то же значение, что и в исходном числе.
    // Поэтому он назван «переносящим знак».
    console.log( 1024 >> 2);
    // 9 (по осн.10)
//   = 00000000000000000000000000001001 (по осн.2)
                //   --------------------------------
// 9 >> 2 (по осн.10)
//   = 00000000000000000000000000000010 (по осн.2)
//   = 2 (по осн.10)
    console.log( (-9 >> 3))
    console.log( -9 << 2)
    console.log( (-9 >> 3).toString(2))


// Округление
    // Так как битовые операции отбрасывают десятичную часть, то их можно использовать для округления. Достаточно взять любую операцию, которая не меняет значение числа.
    console.log(~~12.3333);
    console.log(12.3333 ^ 0);
    console.log(12.3333 * 31.1111 ^ 0);
    // У побитовых операторов достаточно низкий приоритет, он меньше чем у остальной арифметики


    function isInt(n) {
        return n == (n ^ 0);
    }

    console.log( isInt(2) ); // true
    console.log( isInt(1.5) ); // false
    console.log( isInt(-0.5) ); // false
    console.log((12345678912345).toString(2).length)