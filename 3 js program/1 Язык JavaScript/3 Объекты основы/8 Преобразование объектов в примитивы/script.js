// Все объекты в логическом контексте являются true. Существуют лишь их численные и строковые преобразования.
// Численные преобразования происходят, когда мы вычитаем объекты или выполняем математические операции. Например, объекты Date (мы рассмотрим их в статье Дата и время) могут вычитаться, и результатом date1 - date2 будет временной отрезок между двумя датами.
// Что касается строковых преобразований – они обычно происходят, когда мы выводим объект alert(obj), а также в других случаях, когда объект используется как строка.

let obj = {
    name:'Slava',
    password:'1234',
    age:'17'
} 
let anotherObj = new Object()
// Преобразование к примитивам
    // Мы можем тонко настраивать строковые и численные преобразования, используя специальные методы объекта.

    // Существуют три варианта преобразований («три хинта»), описанные в спецификации:


    // 'string'
        // Для преобразования объекта к строке, когда операция ожидает получить строку, например alert:
        // alert(obj)
        
        // используем объект в качестве имени свойства
        anotherObj[obj] = 123;
        console.log(anotherObj);

    // 'number'
        // явное преобразование
        let num = Number(obj);
        console.log(num); // NaN

        // математическое (исключение бинарного оператора '+');
        let n = +obj; // унарный плюс
        console.log(n); // NaN

        let delta = obj - anotherObj;
        console.log(delta); // NaN
        
        // сравнение больше/менье
        let greater = obj > anotherObj;
        let aGreater = obj < anotherObj;

        console.log(greater); //false
        console.log(aGreater); //false


    // 'default'
        // бинарный плюс
        let total = obj + anotherObj;
        console.log(total); // [object Object][object Object]

        // obj == string/number/symbol
        if(obj == 1) console.log('obj = 1'); // false


// Symbol.toPrimitive
    // Начнём с универсального подхода – символа Symbol.toPrimitive: метод с таким названием (если есть) используется для всех преобразований:
    
    let user = {
        name: 'John',
        money: 1000,

        [Symbol.toPrimitive](hint) {
            console.log('hint: ',hint);
            return hint == "string" ? `{name: "${this.name}"}` : this.money;      
          }
    };
    // демонстрация результатов преобразований:
    console.log(user); // hint: string -> {name: "John"}
    console.log(+user); // hint: number -> 1000
    console.log(user + 500); // hint: default -> 1500


// Методы toString/valueOf (старый способ)
    let user1 = {
        name: "John",
        money: 1000,
    
        // для хинта равного "string"
        toString() {
        return `{name: "${this.name}"}`;
        },
    
        // для хинта равного "number" или "default"
        valueOf() {
        return this.money;
        }
    
    };
    
    console.log(user1); // toString -> {name: "John"}
    console.log(+user1); // valueOf -> 1000
    console.log(user1 + 500); // valueOf -> 1500


// Возвращаемые типы
    // Важно понимать, что все описанные методы для преобразований объектов не обязаны возвращать именно требуемый «хинтом» тип примитива.
    
    // Нет обязательного требования, чтобы toString() возвращал именно строку, или чтобы метод Symbol.toPrimitive возвращал именно число для хинта «number».
    
    // Единственное обязательное требование: методы должны возвращать примитив, а не объект.
    
    // Историческая справка
    // По историческим причинам, если toString или valueOf вернёт объект, то ошибки не будет, но такое значение будет проигнорировано (как если бы метода вообще не существовало).
    
    // Метод Symbol.toPrimitive, напротив, обязан возвращать примитив, иначе будет ошибка.


//  Последующие операции
    // Математические операции, исключая бинарный плюс, преобразуют примитив к числу:
    let obj1 = {
        // toString обрабатывает все преобразования в случае отсутствия других методов
        toString() {
            return '2';
        }
    };
    
    console.log(obj1 *3) // 6, объект был преобразован к примитиву "2", затем умножение сделало его числом