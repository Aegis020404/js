// Регулярные выражения
  // «Длинный» синтаксис:
      //regexp = new RegExp("шаблон", "флаги");

  // короткий синтаксис, использующий слеши "/":
      // regexp = /шаблон/; // без флагов
      // regexp = /шаблон/gmi; // с флагами gmi (будут описаны далее


// Флаги
// Регулярные выражения могут иметь флаги, которые влияют на поиск.
// В JavaScript их всего шесть:
// i
  // С этим флагом поиск не зависит от регистра: нет разницы между A и a (см. пример ниже).
// g
  // С этим флагом поиск ищет все совпадения, без него – только первое.
// m
  // Многострочный режим (рассматривается в главе Многострочный режим якорей ^ $, флаг "m").
// s
  // Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n (рассматривается в главе Символьные классы).
// u
  // Включает полную поддержку юникода. Флаг разрешает корректную обработку суррогатных пар (подробнее об этом в главе Юникод: флаг "u" и класс \p{...}).
// y
  // Режим поиска на конкретной позиции в тексте (описан в главе Поиск на заданной позиции, флаг "y")


// Поиск: str.match
{
  let str = 'Любо, братцы, любо!';
  let res = str.match(/любо/gi)
  console.log( res); // ['Любо', 'любо']
}


// Замена: str.replace
  console.log('We will, We will'.replace(/we/i, "I")); // I will, We will


  // Спецсимволы	Действие в строке замены
  // $&	вставляет всё найденное совпадение
  // $`	вставляет часть строки до совпадения
  // $'	вставляет часть строки после совпадения
  // $n	если n это 1-2 значное число, вставляет содержимое n-й скобочной группы регулярного выражения, больше об этом в главе Скобочные группы
  // $<name>	вставляет содержимое скобочной группы с именем name, также изучим в главе Скобочные группы
  // $$	вставляет символ "$"


// Проверка: regexp.test
  // Метод regexp.test(str) проверяет, есть ли хоть одно совпадение, если да, то возвращает true, иначе false.
  let str = 'Я люБлЮ JavaScript';
  let regexp = /люблю/i;

  console.log(regexp.test(str));