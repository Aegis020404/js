// defer
// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится.
// Скрипты с defer никогда не блокируют страницу.
// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.


// async
// Атрибут async означает, что скрипт абсолютно независим:

// Содержимое страницы отображается сразу же : async его не блокирует.
// DOMContentLoaded может произойти как до, так и после async, никаких гарантий нет.
// Асинхронные скрипты не ждут друг друга. Меньший скрипт small.js идёт вторым, но скорее всего загрузится раньше long.js, поэтому и запустится первым. То есть, скрипты выполняются в порядке загрузки.
// Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д. Они не зависят от наших скриптов, и мы тоже не должны ждать их:








// Динамически загружаемые скрипты
// Мы можем также добавить скрипт и динамически, с помощью JavaScript:
    let script = document.createElement('script');
    script.src = "https://javascript.info/article/script-async-defer/small.js";
    document.body.append(script);
    script.async = false;
    // Динамически загружаемые скрипты по умолчанию ведут себя как «async».

// У async и defer есть кое-что общее: они не блокируют отрисовку страницы. Так что пользователь может просмотреть содержимое страницы и ознакомиться с ней сразу же.

// Но есть и значимые различия:

// Порядок	DOMContentLoaded
// async	Порядок загрузки (кто загрузится первым, тот и сработает).	Не имеет значения. Может загрузиться и выполниться до того, как страница полностью загрузится. Такое случается, если скрипты маленькие или хранятся в кеше, а документ достаточно большой.
// defer	Порядок документа (как расположены в документе).	Выполняется после того, как документ загружен и обработан (ждёт), непосредственно перед DOMContentLoaded.
